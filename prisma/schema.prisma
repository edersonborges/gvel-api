generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Usuario {
  id           String       @id @default(uuid()) @map("_id")
  nome         String
  email        String       @unique
  telefone     String
  senha        String
  cpf          String
  tipo         Int          @default(1)

  logEstoques  LogEstoque[] @relation("LogResponsavel")
  arquivos     Arquivo[]
  pedidos      Pedido[]     @relation("UsuarioResponsavel") 

  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  deletedAt    DateTime?
}

model Cliente {
  id             String         @id @default(uuid()) @map("_id")
  nome           String
  email          String         @unique
  telefone       String
  cnpj           String
  tipo           Int            @default(1)

  ordensServico  OrdemServico[] 
  pedidos        Pedido[]       @relation("ClientePedido")

  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  deletedAt      DateTime?
}

model Servico {
  id           String               @id @default(uuid()) @map("_id")
  servico      String
  ativo        Boolean              @default(false)
  ordem        Int

  ordemItens   OrdemServicoItem[]  

  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
  deletedAt    DateTime?
}

model Arquivo {
  id         String    @id @default(uuid()) @map("_id")
  imgKey     String
  tipo       String?

  usuario    Usuario?  @relation(fields: [usuarioId], references: [id])
  usuarioId  String?
  
  estoque    Estoque?  @relation(fields: [estoqueId], references: [id])
  estoqueId  String?

  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime?
}

model ObsServico {
  id         String   @id @default(uuid()) @map("_id")
  texto      String

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  deletedAt  DateTime?
}

model Estoque {
  id           String        @id @default(uuid()) @map("_id")
  nome         String
  quantidade   Int
  obs          String

  arquivos     Arquivo[]
  logEstoques  LogEstoque[]  @relation("EstoqueProduto")
  pedidos      Pedido[]      @relation("EstoquePedido")

  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  deletedAt    DateTime?
}

model LogEstoque {
  id            String    @id @default(uuid()) @map("_id")
  data          String
  acao          String
  observacao    String?
  tipoPagamento String?

  responsavel   Usuario   @relation("LogResponsavel", fields: [responsavelId], references: [id])
  responsavelId String

  produto       Estoque   @relation("EstoqueProduto", fields: [produtoId], references: [id])
  produtoId     String

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?
}

model Convite {
  id         String   @id @default(uuid()) @map("_id")
  nome       String
  email      String
  tipo       Int      @default(1)
  utilizado  Boolean  @default(false)

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  deletedAt  DateTime?
}

model RecSenhaToken {
  id         String   @id @default(uuid()) @map("_id")
  email      String
  token      String
  isUsed     Boolean  @default(false)

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model OrdemServico {
  id              String              @id @default(uuid())
  numero          Int                 @default(autoincrement()) // Campo auto-incremento
  cliente         Cliente             @relation(fields: [clienteId], references: [id])
  clienteId       String
  dataInicio      DateTime            @default(now())
  dataFim         DateTime?
  placa           String
  tipoVeiculo     String
  subtipoVeiculo  String
  servicos        OrdemServicoItem[]
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  deletedAt       DateTime?
}


model OrdemServicoItem {
  id               String         @id @default(uuid())
  ordemServico     OrdemServico   @relation(fields: [ordemServicoId], references: [id])
  ordemServicoId   String
  servico          Servico        @relation(fields: [servicoId], references: [id])
  servicoId        String
  realizado        Boolean        @default(false)
  ordemPrioridade  Int
  inicioEtapa      DateTime?      // Data/hora de início da etapa
  fimEtapa         DateTime?      // Data/hora de término da etapa
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  deletedAt        DateTime?
}


model Pedido {
  id             String    @id @default(uuid())
  estoque        Estoque   @relation("EstoquePedido", fields: [estoqueId], references: [id])
  estoqueId      String
  quantidade     Int
  placa          String
  responsavel    Usuario   @relation("UsuarioResponsavel", fields: [responsavelId], references: [id])
  responsavelId  String
  cliente        Cliente   @relation("ClientePedido", fields: [clienteId], references: [id])
  clienteId      String
  tipoPagamento  String?
  observacao     String?

  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  deletedAt      DateTime?
}
