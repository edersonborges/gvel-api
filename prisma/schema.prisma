generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Usuario {
  id           String       @id @default(uuid()) @map("_id")
  nome         String
  email        String       @unique
  telefone     String
  senha        String
  cpf          String
  tipo         Int          @default(1)

  veiculos     Veiculo[]    @relation("VeiculoResponsavel")
  logEstoques  LogEstoque[] @relation("LogResponsavel")
  arquivos     Arquivo[]

  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  deletedAt    DateTime?
}

model Cliente {
  id             String         @id @default(uuid()) @map("_id")
  nome           String
  email          String         @unique
  telefone       String
  cnpj           String
  tipo           Int            @default(1)

  ordensServico  OrdemServico[] // Campo oposto para relação com OrdemServico

  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  deletedAt      DateTime?
}

model Veiculo {
  id             String         @id @default(uuid()) @map("_id")
  nome           String
  cnpj           String
  placa          String
  responsavel    Usuario        @relation("VeiculoResponsavel", fields: [responsavelId], references: [id])
  responsavelId  String
  tipoVeic       String
  subtipoVeic    String
  status         String?

  arquivos       Arquivo[]

  ordensServico  OrdemServico[] // Campo oposto para relação com OrdemServico

  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  deletedAt      DateTime?
}

model Servico {
  id           String               @id @default(uuid()) @map("_id")
  servico      String
  ativo        Boolean              @default(false)
  ordem        Int

  ordemItens   OrdemServicoItem[]   // Campo oposto para relação com OrdemServicoItem

  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
  deletedAt    DateTime?
}

model Arquivo {
  id         String    @id @default(uuid()) @map("_id")
  imgKey     String
  tipo       String?

  usuario    Usuario?  @relation(fields: [usuarioId], references: [id])
  usuarioId  String?
  
  estoque    Estoque?  @relation(fields: [estoqueId], references: [id])
  estoqueId  String?
  
  veiculo    Veiculo?  @relation(fields: [veiculoId], references: [id])
  veiculoId  String?

  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime?
}

model ObsServico {
  id         String   @id @default(uuid()) @map("_id")
  texto      String

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  deletedAt  DateTime?
}

model Estoque {
  id           String        @id @default(uuid()) @map("_id")
  nome         String
  quantidade   Int
  obs          String

  arquivos     Arquivo[]
  logEstoques  LogEstoque[]  @relation("EstoqueProduto") // Campo oposto para relação

  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  deletedAt    DateTime?
}

model LogEstoque {
  id            String    @id @default(uuid()) @map("_id")
  data          String
  acao          String
  placa         String
  observacao    String
  tipoPagamento String?

  responsavel   Usuario   @relation("LogResponsavel", fields: [responsavelId], references: [id])
  responsavelId String

  produto       Estoque   @relation("EstoqueProduto", fields: [produtoId], references: [id])
  produtoId     String

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?
}

model Convite {
  id         String   @id @default(uuid()) @map("_id")
  nome       String
  email      String
  codigo     String
  tipo       Int      @default(1)
  utilizado  Boolean  @default(false)

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  deletedAt  DateTime?
}

model RecSenhaToken {
  id         String   @id @default(uuid()) @map("_id")
  email      String
  token      String
  isUsed     Boolean  @default(false)

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model OrdemServico {
  id           String              @id @default(uuid())
  cliente      Cliente             @relation(fields: [clienteId], references: [id])
  clienteId    String
  veiculo      Veiculo             @relation(fields: [veiculoId], references: [id])
  veiculoId    String
  dataInicio   DateTime            @default(now())
  dataFim      DateTime?
  
  servicos     OrdemServicoItem[]

  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
  deletedAt    DateTime?
}

model OrdemServicoItem {
  id               String         @id @default(uuid())
  ordemServico     OrdemServico   @relation(fields: [ordemServicoId], references: [id])
  ordemServicoId   String
  servico          Servico        @relation(fields: [servicoId], references: [id])
  servicoId        String
  realizado        Boolean        @default(false)
  ordemPrioridade  Int

  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  deletedAt        DateTime?
}
